What happens when you initialize a repository? Why do you need to do it?

  When a repository is initialized, meta data is created such as the folder .git
  that cannot be seen in file explorer. This meta data allows for the commits
  to work.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  The staging area is not actually a place where the files are stored, it is
  rather a place where the names of the files are stored which allows us to
  quickly commit any files in the staging area whenever we want to.

How can you use the staging area to make sure you have one commit per logical
change?

  I can put a file into the staging area and I can commit it once I have done
  one logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  If I wanted to test out a very experimental feature in my code I may want to
  make a new branch. This new branch could hold commits of this feature without
  disturbing my commits for the base game.

How do the diagrams help you visualize the branch structure?

  The diagrams make it easier to understand how the branches don't affect each
  other and how detached head-state works where commits there are unreachable
  unless you make another branch there.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  When we merge two branches together, the changes of both branches get combined
  with information about the original starting point. This allows GIT to know
  which lines should be deleted and not. The diagram is drawn how it is because
  the new merged commit has two parents, so there are two arrows going away
  from it.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

  Git's automatic merging is faster than manually merging, but sometimes there
  are merge conflicts. In these cases you have to go into the code and choose
  what to keep and what to delete, but git merge tells you which lines are in
  conflict making it easier to manually merge.
